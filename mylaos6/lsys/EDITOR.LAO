DECLARE SUB MsgBeep ()
DECLARE SUB Drucken ()
'<<< OSCODE 5 OPTIMIERT >>>

DECLARE SUB GetChanged ()
DECLARE SUB Save ()
DECLARE FUNCTION ComboBox$ (Nr!, Z!, s!, zu!, su!)
DECLARE FUNCTION Format$ (FormatString AS STRING)
DECLARE SUB PartFormat (Text$, Setting$)
DECLARE SUB echo (Txt$)
DECLARE FUNCTION MenuInt$ (Item$, Trennzeichen$)
DECLARE SUB SetAttr (aDatei$, Attr$)
DECLARE FUNCTION LaOSFileName$ (DosFile$)
DECLARE FUNCTION ende! (Nr!)
DECLARE SUB Loesche (AlterName$)
DECLARE SUB MenuBox (Zeilen!, Spalten!, Caption$)
DECLARE SUB EditBox (Z!, s!, zu!, su!)
DECLARE FUNCTION LinkIt$ ()
'LaOS Version 2.00 Copyright (C) Urs Langmeier, New BCO
'Sommer 1998, Version ohne ScreenText und ohne Run-on-command

'Entwickelt unter QBASIC von Urs Langmeier
'Idee & Programmierung: Urs Langmeier

'Alle Urheber- und Leistungsschutzrechte vorbehalten. Der Code darf nicht un-
'erlaubt kopiert oder verkauft werden.



DECLARE FUNCTION Drivelist$ (Nr!)
DECLARE SUB Switchdrive (lw$)
DECLARE FUNCTION FileChoose$ (Art1$)
DECLARE FUNCTION GetFile$ (Sym$, Art1$)
DECLARE FUNCTION DosFile$ (Kennung$, InOrdner$)
DECLARE SUB ExitBox (x!, y!)
DECLARE FUNCTION exist! (p$)
DECLARE SUB TextBox (Zeilen!, Spalten!, Text$, Break!)
DECLARE SUB Register (Z!, s!, zu!, su!, Text$)
DECLARE SUB FrameWindow (a!, b!, c!, d!, del!)
DECLARE SUB echo (Text$)
DECLARE SUB GetInp ()
DECLARE SUB Control (Zeilen!, Spalten!, Text$)
DECLARE SUB CLW ()
DECLARE FUNCTION Gerade! (Zahl!)
DECLARE FUNCTION IsExist! (Datei$, InOrdner$)
DECLARE FUNCTION ComboBox$ (Nr!, Z!, s!, zu!, su!)
DECLARE FUNCTION IsEmptyBox! (Ordner$)
DECLARE FUNCTION IsExistBox! (Box$)
DECLARE FUNCTION Trim$ (Variable$, Trennzeichen$, a!)
DECLARE FUNCTION MenuInt$ (Item$, Trennzeichen$)
DECLARE SUB Dialog (Caption$)
DECLARE SUB LoadSymbol (Name$, Kennung$)
DECLARE SUB ShowSymbols ()
DECLARE SUB Menuact (Menu$)
DECLARE FUNCTION SDate$ ()
DECLARE SUB TimeLock (Status!)
DECLARE SUB StoppUhrBeep (Uhr!)
DECLARE SUB Symbact (Symbol$)
DECLARE SUB ShowInfo ()
DECLARE FUNCTION GetKey$ ()
DECLARE SUB ClearControls (Connect!)
DECLARE SUB NextControl ()
DECLARE SUB LastControl ()
DECLARE SUB Activate (Ctrl$)
DECLARE FUNCTION InputBox$ (Zeilen!, Spalten!, Text$, Break!, MaxDown!)
ON ERROR GOTO fehlernext
SCREEN 9
VIEW PRINT 1 TO 25
'    -> 640 x 350 Grafik
'    ˛ 80 x 25 oder 80 x 43 Textformat, 8 x 14 oder 8 x 8 Zeichenfeldgrî·e
'    ˛ Zuweisung von 16 Farben zu 4 Attributen (64 KB Adapterspeicher) oder
'      64 Farben zu 16 Attributen (mehr als 64 KB Adapterspeicher)
'    ˛ Falls 64KB EGA Adapterspeicher, 1 Bildschirmspeicherseite (0);
'      ansonsten 2 Seiten (0-1)

DIM SHARED Hintergrund(456) AS LONG
DIM SHARED Stoppuhr(1 TO 4) AS INTEGER '1 ist Reserviert!
DIM SHARED AlteZeit(1 TO 4) AS LONG
DIM SHARED TextScale AS INTEGER
DIM SHARED TextBreak AS INTEGER
DIM SHARED Activ AS STRING
DIM SHARED ControlNr AS INTEGER
DIM SHARED ControlList(40) AS STRING
DIM SHARED Break AS INTEGER
DIM SHARED EBox.left AS INTEGER, EBox.top AS INTEGER
DIM SHARED Left AS INTEGER, Top AS INTEGER, Right AS INTEGER, Down AS INTEGER
DIM SHARED NextBreak AS INTEGER
DIM SHARED QuickInfos(40) AS STRING
DIM SHARED ControlConnect AS INTEGER 'Zur Unterscheidung der 3 Eingabecontrols
DIM SHARED Symbollist(201) AS STRING, SymbolNr AS INTEGER
DIM SHARED Symb.left AS INTEGER, Symb.top AS INTEGER, Symb.total AS INTEGER
DIM SHARED Symb.ipp AS INTEGER 'IPP=Icons par page (misst die letzte volle Seite)
DIM SHARED Symb.count 'ZÑhlt die Symbole in der aktuellen Seite
DIM SHARED DimY AS LONG, DimNow AS INTEGER, Symb.pnr'Nr. in der aktuellen Seite
DIM SHARED MenuList(40) AS STRING, MenuNr AS INTEGER
DIM SHARED Focus AS STRING
DIM SHARED keyb AS STRING
DIM SHARED Change(6) AS INTEGER
DIM SHARED errorlevel AS INTEGER
DIM SHARED Choice AS INTEGER
DIM SHARED Combo(1 TO 1, 1 TO 100) AS STRING
DIM SHARED Pictures(4) AS STRING
DIM SHARED ActivItem AS STRING, DriveName AS STRING
DIM SHARED Texts(1 TO 100) AS STRING, Umbruch AS INTEGER

FesteEinstellungen:
WIDTH 80, 25
Umbruch = -1

Einstellungen:
DIM SHARED Fensterfarbe AS INTEGER, Randfarbe AS INTEGER, Schattenfarbe AS INTEGER, Controlfarbe AS INTEGER
DIM SHARED Symbolactiv AS INTEGER, SymbactStil AS INTEGER, SymbolFrame AS INTEGER, SymbolColor AS INTEGER
DIM SHARED Hintergrundfarbe  AS INTEGER, Farbe AS INTEGER, IconVerticalSpace AS INTEGER
DIM SHARED InfoTime AS INTEGER, InfoColor  AS INTEGER, InfoFrame, Datumsformat AS INTEGER

CLOSE 1: OPEN "c:\laos\config.lcg" FOR RANDOM AS 1
GET 1, 1, Schema$

DIM m(1 TO 15)

IF Schema$ <> "" THEN

IF LOF(1) <> 0 THEN
CLOSE 1: OPEN "c:\laos\" + Schema$ + ".scl" FOR INPUT AS 1: LINE INPUT #1, a$
FOR i = 1 TO 15
INPUT #1, m(i)
NEXT
ELSE m(10) = 15: m(1) = 14
END IF

ELSE m(10) = 15: m(1) = 14
END IF

Fensterfarbe = m(1)'Fensterfarben
Randfarbe = m(2)
Schattenfarbe = m(3)
Controlfarbe = m(4)  'SchaltflÑchenfarbe
Symbolactiv = m(5) 'Umrahmungsfarbe des aktiven Symbols
SymbactStil = m(6) 'Umrahmungs-Stil des aktivierten Symbols (-1=voll)

SymbolFrame = m(7) 'Farbe des Symbolrahmens
SymbolColor = m(8) 'Farbe des Symbolhintergrundes

Hintergrundfarbe = m(9) 'Bildschirmfarben
Farbe = m(10) '= Vordergrundfarbe

IconVerticalSpace = m(11) 'Setzt den Vertikalen Standard-Abstand der Symbole
                            'Auf Null gesetzt ist der Abstand genÅgend.
InfoTime = m(12)'Setzt die zu verstreichende Zeit in Sekunden, bis die Quick-
                  'Info erscheint. (0=Ausgeschaltet)
InfoColor = m(13) 'Setzt die Farbe, in der der Quick-Info-Text erscheint.
InfoFrame = m(14) 'Setzt die Farbe des Quick-Info-Rahmens.

Datumsformat = m(15)

ERASE m

CONST Fe1 = 6, Fe2 = 4, Fe3 = 75, Fe4 = 20 'Startfensterkoordinaten
Stoppuhr(2) = 60 '2.Stoppuhr: Bildschirmschoner


VorStart:
CLOSE
VIEW
COLOR Farbe, Hintergrundfarbe
Switchdrive "c"

Code = 0 'Legt die Ereignisverfolgung fÅr die Alt-Taste fest
FOR i = 15 TO 19
KEY i, CHR$(Code) + CHR$(56)
ON KEY(i) GOSUB AltKey
Code = Code + 32
NEXT i
Code = 0: i = 0

Programm:
'Schreiben Sie hier Ihren persînlichen Code:
DIM SHARED Changed AS INTEGER

IF LinkIt <> "" THEN a$ = LinkIt: nam$ = LaOSFileName(a$): GOTO ld
DIM SHARED EBox AS INTEGER
1
ClearControls (3)
CLW
MenuBox 2, 2, "Datei"
IF loaded$ <> "" THEN MenuBox 2, 66, "Brief lîschen"
EditBox 5, 2, 24, 79
IF Activ <> "" THEN GOTO MenuUp

CHAIN "c:\laos\run.bas"
MenuUp:
EBox = 0
GetInp
IF keyb = "esc" THEN Activate CHR$(0): GOTO 1
SELECT CASE Focus
CASE "Brief lîschen"
                        Register 8, 8, 13, 55, "Brief lîschen"
                        ExitBox -1, -1
                        echo "Soll dieser Brief wirklich gelîscht werden?"
                        jn$ = InputBox(11, 10, "", 4, 1)
                        IF LCASE$(jn$) = "ja" AND keyb <> "esc" THEN Loesche loaded$: loaded$ = "": ERASE Texts

CASE "Datei"
DIM chkUmbruch AS STRING
IF Umbruch THEN chkUmbruch = CHR$(4) + " " ELSE chkUmbruch = ""
a$ = MenuInt("Neu]Speichern...]Laden...]-]Drucken...]-]" + chkUmbruch + "Zeilenumbruch]-]Beenden]", "]")

SELECT CASE a$
CASE chkUmbruch + "Zeilenumbruch": Umbruch = -1 - Umbruch
CASE "Drucken...": Drucken
CASE "Neu": GetChanged: IF keyb <> "esc" THEN loaded$ = "": ERASE Texts
CASE "Speichern...": Save
CASE "Laden...": GetChanged: IF keyb <> "esc" THEN a$ = FileChoose("Text")
IF keyb = "esc" THEN 1
ld:
loaded$ = a$
ERASE Texts
CLOSE 1: OPEN a$ FOR INPUT AS 1
FOR Nr = 1 TO 100
IF EOF(1) <> 0 THEN EXIT FOR
LINE INPUT #1, Texts(Nr)
NEXT
CLOSE 1

CASE "Beenden": GetChanged: IF keyb <> "esc" THEN CHAIN "c:\laos\run.bas"
END SELECT
END SELECT
Activate CHR$(0)
GOTO 1

CHAIN "c:\laos\run.bas"
TimeEreignis:
TIMER OFF
ShowInfo
RETURN


AltKey:
IF MenuList(1) <> "" THEN Activate CHR$(0): ControlConnect = 1: Activate MenuList(1): MenuNr = 1
RETURN

fehlernext:
errorlevel = 1
RESUME NEXT

CHAIN "c:\laos\run.bas"

SUB Activate (Ctrl$)
SELECT CASE ControlConnect
CASE 0 'Controls
i = 0
DO
i = i + 1
a$ = ControlList(i)
Activ = Ctrl$
IF a$ = "" THEN EXIT SUB
'ControlNr = i
Zeilen = VAL(MID$(a$, 1, 2))
Spalten = VAL(MID$(a$, 3, 2))
Texta$ = MID$(a$, 5)
Control Zeilen, Spalten, Texta$
LOOP UNTIL a$ = ""
CASE 1 'Menus
i = 0
Activ = Ctrl$
DO
i = i + 1
a$ = MenuList(i)
IF a$ = "" THEN EXIT DO
Menuact a$
LOOP UNTIL a$ = ""



CASE 2 'Symbole
i = 0
Activ = Ctrl$
'i = Symb.total * Symb.page
DO
i = i + 1
a$ = Symbollist(i)
IF MID$(a$, 15) = Activ THEN Activ = a$
IF a$ = "" THEN EXIT DO
Symbact a$
LOOP UNTIL a$ = ""
END SELECT
END SUB

SUB ClearControls (Connect)
Activ = ""
SELECT CASE Connect
CASE 0: ControlNr = 0: ERASE ControlList: ERASE QuickInfos
CASE 1: MenuNr = 0: ERASE MenuList: ERASE QuickInfos
CASE 2: SymbolNr = 0: ERASE Symbollist: Symb.left = 0: Symb.top = 0: Symb.total = 0
CASE 3 'Alle lîschen
ControlNr = 0: ERASE ControlList: ERASE QuickInfos
MenuNr = 0: ERASE MenuList: ERASE QuickInfos
SymbolNr = 0: ERASE Symbollist: Symb.left = 0: Symb.top = 0: Symb.total = 0
END SELECT

END SUB

SUB CLW
'Fenster:
LINE (2, 2)-(637, 347), 0, BF
LINE (0, 0)-(638, 348), Fensterfarbe, B
'Schatten:
LINE (1, 1)-(637, 1), Schattenfarbe
LINE (1, 1)-(1, 347), Schattenfarbe
'Rand:
LINE (639, 349)-(0, 349), Randfarbe
LINE (639, 349)-(639, 0), Randfarbe

TextScale = 2 '=Zeile
TextBreak = 2 '=Spalte
EBox.left = 603: EBox.top = 321
Left = 2: Top = 2: Right = 79: Down = 24
END SUB

FUNCTION ComboBox$ (Nr, Z, s, zu, su)

IF Combo(Nr, 1) = "" THEN Combo(Nr, 1) = " "
DIM Trenner(1 TO 5)


MaxItem% = 30000

IF Z = 0 THEN Z = Top
IF s = 0 THEN s = Left
IF zu = 0 THEN zu = Down
IF su = 0 THEN su = Right

MaxLenth = su - s + 1
MaxDown = zu - Z + 1

DO
i = i + 1
IF Combo(Nr, i) = "-" THEN Combo(Nr, i) = STRING$(MaxLenth, 196): tr = tr + 1: Trenner(tr) = Standort + i
LOOP UNTIL Combo(Nr, i) = ""


a = s * 8 - 11
b = Z * 14 - 17
c = su * 8 + 1
d = zu * 14 + 1


FrameWindow a, b, c, d, 0

ItemPos = 1
ItemPage = 1

IF ActivItem <> "" THEN act$ = ActivItem: zrl = 1: GOTO aktivieren
weiter2:

DO

 Standort = ItemPage * MaxDown - MaxDown + 1
LOCATE Z

 FOR i = 0 TO MaxDown - 1
  IF Standort + i <= MaxItem% THEN
  IF LEN(Combo(Nr, (Standort + i))) <= MaxLenth THEN
  Eintrag$ = Combo(Nr, Standort + i) + SPACE$(MaxLenth - LEN(Combo(Nr, Standort + i)))
  ELSE
  Eintrag$ = LEFT$(Combo(Nr, Standort + i), MaxLenth)
  END IF
  ELSE Eintrag$ = SPACE$(MaxLenth)
  END IF

   IF Standort + i = ItemPos THEN COLOR InfoColor ELSE COLOR Farbe

   LOCATE , s: PRINT Eintrag$
 IF i = 0 THEN LINE (s * 8 - 9, (Z + i) * 14 - 15)-(su * 8, (Z + i) * 14), 0, B ELSE LINE (s * 8 - 9, (Z + i) * 14 - 14)-(su * 8, (Z + i) * 14), 0, B

 NEXT i

i = ItemPos - Standort
LINE (s * 8 - 9, (Z + i) * 14 - 15)-(su * 8, (Z + i) * 14), InfoFrame, B

SELECT CASE GetKey
CASE "up"
ItemPos = ItemPos - 1

FOR i = 1 TO UBOUND(Trenner)
IF Trenner(i) = ItemPos THEN ItemPos = ItemPos - 1
NEXT
IF ItemPos < Standort THEN ItemPage = ItemPage - 1


CASE "down"
IF ItemPos < MaxItem% THEN

IF Combo(Nr, ItemPos + 1) <> "" THEN

ItemPos = ItemPos + 1

FOR i = 1 TO UBOUND(Trenner)
IF Trenner(i) = ItemPos THEN ItemPos = ItemPos + 1
NEXT


IF ItemPos > Standort + MaxDown - 1 THEN ItemPage = ItemPage + 1

END IF
END IF

CASE "home"
    ItemPos = 1
    ItemPage = 1
    IF Trenner(1) = 1 THEN ItemPos = ItemPos + 1

CASE "end"
    DO
        ItemPos = ItemPos + 1
        Standort = ItemPage * MaxDown - MaxDown + 1
        IF ItemPos > Standort + MaxDown THEN ItemPage = ItemPage + 1
    LOOP UNTIL Combo(1, ItemPos) = ""
        ItemPos = ItemPos - 1

    FOR i = 1 TO UBOUND(Trenner)
        IF Trenner(i) = ItemPos THEN ItemPos = ItemPos - 1
    NEXT

CASE "pageup"
IF ItemPos - MaxDown > 0 THEN
    ItemPage = ItemPage - 1
    ItemPos = ItemPos - MaxDown
END IF
CASE "pagedown"
IF ItemPos + MaxDown < MaxItem% + 1 THEN
IF Combo(Nr, ItemPos + MaxDown) <> "" THEN
ItemPage = ItemPage + 1
ItemPos = ItemPos + MaxDown
END IF
END IF
CASE CHR$(13), "esc", "tab", CHR$(8)
IF keyb = CHR$(8) THEN keyb = "esc"
    LINE (s * 8 - 9, (Z + i) * 14 - 15)-(su * 8, (Z + i) * 14), 0, B
    Choice = ItemPos: ComboBox = Combo(Nr, ItemPos): GOTO ExitBox

CASE ELSE
IF LEN(keyb) = 1 THEN
act$ = keyb
aktivieren:

AltePosition = ItemPos
AlteSeite = ItemPage

DO
 ItemPos = ItemPos + 1
 IF ItemPos = AltePosition THEN ItemPage = AlteSeite: EXIT DO
 Standort = ItemPage * MaxDown - MaxDown + 1
 IF ItemPos > Standort + MaxDown - 1 THEN ItemPage = ItemPage + 1

   Eintrag$ = LEFT$(Combo(Nr, ItemPos), MaxLenth)
   IF Eintrag$ = "" OR ItemPos > MaxItem% - 1 THEN ItemPos = 0: ItemPage = 1

LOOP UNTIL LCASE$(LEFT$(Eintrag$, LEN(act$))) = LCASE$(act$)
GOTO weiter2

END IF

END SELECT

FOR i = 1 TO UBOUND(Trenner)
IF Trenner(i) = ItemPos THEN ItemPos = ItemPos + 1
NEXT

IF ItemPos < 1 THEN ItemPos = 1: ItemPage = 1
IF Combo(Nr, ItemPos) = "" THEN ItemPos = ItemPos - 1
IF ItemPos < 1 THEN ItemPos = 1: ItemPage = 1

LOOP

ExitBox:
COLOR Farbe
END FUNCTION

SUB Control (Zeilen, Spalten, Text$)

IF TextScale = 0 THEN TextScale = Top
IF TextBreak = 0 THEN TextBreak = Left
IF Zeilen = 0 THEN Zeilen = TextScale
IF Spalten = 0 THEN Spalten = TextBreak
IF Zeilen > Down THEN Zeilen = Top: Spalten = NextBreak + 1: TextScale = Top: TextBreak = NextBreak

IF LEN(Text$) + Spalten + 2 > NextBreak THEN NextBreak = LEN(Text$) + Spalten + 2


a = Spalten * 8 - 11
b = Zeilen * 14 - 17
EndSpalte = Spalten + LEN(Text$)
EndZeile = Zeilen + INT(LEN(Text$) / 80 + 1)
IF LEN(Text$) = 80 THEN EndZeile = EndZeile - 1
c = EndSpalte * 8 - 5
d = EndZeile * 14 - 11

LOCATE Zeilen, Spalten: COLOR Farbe: PRINT Text$
'LINE (a, B)-(c, d), Farbe, B
'PAINT (a + 1, B + 1), Controlfarbe, Farbe
LINE (a, b)-(c, d), Controlfarbe, B

'Schatten: (Wird angezeigt, falls das Control aktiviert ist.
IF Activ = Text$ THEN
LINE (a + 1, b + 1)-(c - 1, b + 1), Schattenfarbe
LINE (a + 1, b + 1)-(a + 1, d - 1), Schattenfarbe
ELSE
LINE (a + 1, b + 1)-(c - 1, b + 1), 0
LINE (a + 1, b + 1)-(a + 1, d - 1), 0
END IF
'Rand:
LINE (c + 1, d + 1)-(a, d + 1), Randfarbe
LINE (c + 1, d + 1)-(c + 1, b), Randfarbe


Zeilen$ = MID$(STR$(Zeilen), 2)
Spalten$ = MID$(STR$(Spalten), 2)
IF LEN(Zeilen$) < 2 THEN Zeilen$ = "0" + Zeilen$
IF LEN(Spalten$) < 2 THEN Spalten$ = "0" + Spalten$

'Control eintragen:
a$ = Zeilen$ + Spalten$ + Text$
i = 0
DO: i = i + 1
IF ControlList(i) = a$ THEN GOTO 2
LOOP UNTIL ControlList(i) = ""
ControlList(i) = a$
ControlNr = 1


2 Activ = Text$: ControlConnect = 0: TextScale = Zeilen + 2
END SUB

SUB DeleteBox (Box$)

CLOSE 1: OPEN "ORDNER.BNK" FOR RANDOM AS 1
i = 0
DO
i = i + 1
GET 1, i, a$
IF a$ = Box$ THEN
DO
plus = plus + 1
GET 1, i + plus, a$
PUT 1, i + plus - 1, a$
LOOP WHILE a$ <> ""
errorlevel = 0: EXIT SUB
END IF
LOOP UNTIL a$ = ""

errorlevel = 1 'Ordner nicht gefunden.
END SUB

SUB Dialog (Caption$)
'Formatoptionen: gleich wie echo. Standard: "c"=zentriert
PartFormat Caption$, fmt$

IF LEN(Caption$) < 22 THEN Caption$ = STRING$(INT((22 - LEN(Kennung$)) / 2), " ") + Caption$ + STRING$(CINT((22 - LEN(Kennung$)) / 2 + .1), " ")

IF LEN(Caption$) > 303 THEN Caption$ = LEFT$(Caption$, 300) + "..."
IF LEN(Caption$) > 76 THEN Length = 76 ELSE Length = LEN(Caption$)
Spalten = INT(40 - Length / 2 + 1)
Zeilen = 11 - INT(LEN(Caption$) / 76) + 1

x1! = Spalten * 8 - 11
y1! = Zeilen * 14 - 17
EndSpalten = 40 + INT(Length / 2)
EndZeilen = 14 + INT(LEN(Caption$) / 76)
IF INT(LEN(Caption$) / 76) > 1 THEN EndZeilen = EndZeilen - (INT(LEN(Caption$) / 76) - 1)
IF LEN(Caption$) < 76 THEN EndZeilen = EndZeilen + 1
x2! = EndSpalten * 8 + 4
y2! = EndZeilen * 14 - 4
Groesse = 4 + INT(((PMAP(x2!, 0) - PMAP(x1!, 0) + 1) * (1) + 7) / 8) * 2 * (PMAP(y2!, 1) - PMAP(y1!, 1) + 1)
DIM Background(Groesse) AS INTEGER


GET (x1!, y1!)-(x2!, y2!), Background

FrameWindow x1!, y1!, x2! - 1, y2! - 1, 1

a% = TextBreak: b% = TextScale: c% = Right: d% = Down
    TextBreak = Spalten
    TextScale = Zeilen
    Right = EndSpalten
    Down = EndZeilen

        IF fmt$ = "" THEN fmt$ = "c"
        echo Caption$ + Format(fmt$)

Zeilen = TextScale
TextBreak = a%: TextScale = b%: Right = c%: Down = d%

TextBox Zeilen + 1, 33, "      OK", 14

DO
b$ = a$
a$ = GetKey
LOOP UNTIL a$ = "esc" OR a$ = CHR$(13)
IF a$ = "esc" THEN keyb = "esc" ELSE keyb = b$
PUT (x1!, y1!), Background, PSET: x1! = 0: y1! = 0: EXIT SUB


END SUB

FUNCTION DosFile$ (Kennung$, InOrdner$)
'Gibt die DOS-Datei eines LaOS-Files zurÅck.
'Beispiel: OPEN DosFile("LaOS Draw","Zubehîr") FOR INPUT AS 1

CLOSE 1: OPEN "DATEIEN.BNK" FOR RANDOM AS #1 LEN = 400
FIELD 1, 11 AS Dateiname$, 16 AS Art$, 11 AS Symbol$, 32 AS OsName$, 32 AS Ordner$, 11 AS link$, 10 AS Datum$, 5 AS Zeit$, 1 AS Attribut$, 256 AS FileInfo$

a = 0
DO
a = a + 1
GET 1, a
IF Kennung$ = RTRIM$(OsName$) AND InOrdner$ = RTRIM$(Ordner$) THEN DosFile = RTRIM$(Dateiname$): CLOSE 1: EXIT FUNCTION
LOOP UNTIL Dateiname$ = STRING$(11, 0)

errorlevel = 1
CLOSE 1

END FUNCTION

FUNCTION Drivelist$ (Nr)
STATIC LastNr
IF Nr < 1 THEN Nr = LastNr + 1

CLOSE 1: OPEN "c:\laos\drvlist.bnk" FOR RANDOM AS 1
GET 1, Nr, a$
IF a$ = "" THEN GET 1, 1, a$: Nr = 1

LastNr = Nr
Drivelist = LEFT$(a$, 1)
CLOSE 1
END FUNCTION

SUB Drucken

50
Register 8, 8, 16, 50, "Drucken auf..."
ExitBox -1, -1
echo ""
echo "Anschluss:"
a$ = InputBox(10, 24, "LPT1", 20, 1)

IF keyb = "esc" THEN EXIT SUB

echo ""
echo "Linker Einzug in Spalten: "
b$ = InputBox(12, 36, "0", 26, 1)

IF keyb = "esc" THEN EXIT SUB
IF VAL(b$) <> 0 THEN Dialog "Achtung: Mit einem Einzug grîsser als 0 hat eventuell nicht mehr der ganze Text darin Platz! Escape - Abbrechen"
IF keyb = "esc" THEN 50


CLOSE 1: OPEN a$ FOR INPUT AS 1
IF NOT EOF(1) THEN Dialog "Kein gÅltiger Anschluss gewÑhlt! Beispiel: LPT1, LPT2, etc...": GOTO 50

errorlevel = 0

CLOSE 1: OPEN a$ FOR OUTPUT AS 1
FOR Nr = 1 TO 100
PRINT #1, SPACE$(VAL(b$)) + RTRIM$(Texts(Nr))
IF ende(Nr) = 1 THEN EXIT FOR
NEXT
CLOSE 1

END SUB

SUB echo (Txt$)
PartFormat Txt$, fmt$

'Format: "l", "c", "r": LinksbÅndig, zentriert, rechtsbÅndig

SELECT CASE fmt$
    CASE "l", "": Align% = 0
    CASE "c": Align% = 1
    CASE "r": Align% = 2
END SELECT

IF TextScale = 0 THEN TextScale = Top
IF TextBreak = 0 THEN TextBreak = Left
IF TextScale > Down THEN TextScale = Top

'10.11.1999: Echo mit Zeilenumbruch (C) Urs Langmeier.

Text$ = Txt$ + " "

DIM s AS INTEGER, Z AS INTEGER, T AS INTEGER, brk AS INTEGER


s = 1
Z = Right - TextBreak + 2'ZeilenlÑnge
dwn = 0

p1% = s
p2% = p1%
DO
    T = T + 1
        IF T = p1% THEN p2% = p1%'alten Retten
        p1% = INSTR(T, Text$, " ")
        IF p1% = 0 OR p1% = LEN(Text$) THEN
            IF p1% <= s + Z - 1 THEN p2% = LEN(Text$): brk = -1
        END IF

        IF p1% > s + Z - 1 OR brk THEN 'nehme alten, weil neuen Åber die Zeile ragt.
            'Zeile ausgeben:
            p1% = p2%
            IF TextScale + dwn > Down THEN EXIT DO
                IF p1% - s <= 0 THEN 'falls Wort zu lange (nicht in die Zeile passt:)

                    p1% = s + Z - 1
                    a$ = MID$(Text$, s, p1% - s)
                    T = p1% - 1
                    s = T + 1

                ELSE

                    a$ = MID$(Text$, s, p1% - s)
                    T = p1% + 1
                    s = T
                END IF

            'Ausrichtung:
            SELECT CASE Align%
                CASE 0: x% = TextBreak
                CASE 1: x% = TextBreak + FIX((Right - TextBreak - LEN(a$) + 1) / 2)
                CASE 2: x% = Right - LEN(a$) + 1
            END SELECT

            LOCATE TextScale + dwn, x%
            PRINT a$;

            dwn = dwn + 1
        END IF
LOOP UNTIL T >= LEN(Text$)
TextScale = TextScale + dwn


END SUB

SUB EditBox (Z, s, zu, su)
MaxItem% = 100

IF Z = 0 THEN Z = Top
IF s = 0 THEN s = Left
IF zu = 0 THEN zu = Down
IF su = 0 THEN su = Right

MaxLenth = su - s + 1
MaxDown = zu - Z + 1


a = s * 8 - 11
b = Z * 14 - 17
c = su * 8 + 1
d = zu * 14 + 1

dok.up = 1
Screen.Z = 1
Screen.S = 1
Box.Left = s
Box.Top = Z
Box.Right = su
Box.Down = zu

Setting:
FOR Nr = 1 TO MaxItem%
Texts(Nr) = LEFT$(Texts(Nr), MaxLenth)
Texts(Nr) = Texts(Nr) + SPACE$(MaxLenth - LEN(Texts(Nr)))
NEXT Nr


NeuRahmen:
FrameWindow a, b, c, d, 0


Refreshing:
rf = 0
IF dok.up < 1 THEN dok.up = 1: Screen.Z = 1: Screen.S = 1

i = 0
FOR Nr = dok.up TO MaxItem%
i = i + 1
IF i <= MaxDown THEN LOCATE Box.Top + i - 1, Box.Left: PRINT Texts(Nr) + SPACE$(MaxLenth - LEN(Texts(Nr)))
NEXT Nr
GOTO Cursor

LinePrint:
LOCATE Box.Top + Screen.Z - 1, Box.Left
PRINT Texts(dok.up + Screen.Z - 1)


Cursor:
LOCATE Box.Top + Screen.Z - 1, Box.Left + Screen.S - 1
LINE (POS(0) * 8, CSRLIN * 14 - 1)-(POS(0) * 8 - 8, CSRLIN * 14 - 1), InfoColor



Keyboard:
EBox = 1
a$ = GetKey

IF Activ <> "" THEN EXIT SUB

LINE (POS(0) * 8, CSRLIN * 14 - 1)-(POS(0) * 8 - 8, CSRLIN * 14 - 1), 0

IF a$ = CHR$(0) + ";" THEN a$ = CHR$(174)
IF a$ = CHR$(0) + "<" THEN a$ = CHR$(175)

IF a$ = CHR$(0) + CHR$(133) THEN a$ = CHR$(247)

IF a$ = CHR$(0) + "T" THEN a$ = CHR$(174) 'shift f1
IF a$ = CHR$(0) + "U" THEN a$ = CHR$(175) 'shift f2


IF a$ = CHR$(0) + "=" THEN a$ = CHR$(196)
IF a$ = CHR$(0) + ">" THEN a$ = CHR$(179)

IF a$ = CHR$(0) + "?" THEN a$ = CHR$(219)
IF a$ = CHR$(0) + "@" THEN a$ = CHR$(178)
IF a$ = CHR$(0) + "A" THEN a$ = CHR$(177)
IF a$ = CHR$(0) + "B" THEN a$ = CHR$(176)

IF a$ = CHR$(0) + "C" THEN a$ = CHR$(220)
IF a$ = CHR$(0) + "D" THEN a$ = CHR$(223)


SELECT CASE a$
CASE CHR$(12): 'Unterstreichen:
a$ = CHR$(196): GOTO 42
CASE "tab"
sz$ = Texts(dok.up + Screen.Z - 1)

IF RTRIM$(MID$(sz$, Screen.S)) = "" THEN
Screen.S = Screen.S + 8
IF Screen.S > MaxLenth THEN Screen.S = MaxLenth
ELSE
DO
Screen.S = INSTR(Screen.S + 1, sz$, " ") + 1
LOOP UNTIL MID$(sz$, Screen.S, 1) <> " "
IF Screen.S < 1 THEN Screen.S = 1
IF Screen.S > MaxLenth THEN Screen.S = MaxLenth
END IF

CASE "end"
Screen.S = LEN(RTRIM$(Texts(dok.up + Screen.Z - 1))) + 1


CASE "home"
Screen.S = 1


CASE "pageup"
dok.up = dok.up - 1
GOTO Refreshing

CASE "pagedown"
dok.up = dok.up + 1
IF dok.up > MaxItem% THEN dok.up = MaxItem%
GOTO Refreshing


CASE "insert"
sz$ = Texts(dok.up + Screen.Z - 1)
links = Screen.S
IF links < 0 THEN links = 0
sz$ = LEFT$(sz$, links - 1) + " " + MID$(sz$, links)
sz$ = LEFT$(sz$, MaxLenth)
Texts(dok.up + Screen.Z - 1) = sz$


CASE "delete"
sz$ = Texts(dok.up + Screen.Z - 1)

IF RTRIM$(sz$) = "" THEN
FOR Nach = dok.up + Screen.Z TO MaxItem%
Texts(Nach - 1) = Texts(Nach)
NEXT Nach
Texts(MaxLenth) = SPACE$(MaxLenth)
GOTO Refreshing
END IF

links = Screen.S
IF links < 1 THEN links = 1
sz$ = LEFT$(sz$, links - 1) + MID$(sz$, links + 1)
sz$ = sz$ + SPACE$(MaxLenth - LEN(sz$))
Texts(dok.up + Screen.Z - 1) = sz$


CASE CHR$(8)
IF Screen.S > 1 THEN
sz$ = Texts(dok.up + Screen.Z - 1)
links = Screen.S - 1
IF links < 1 THEN links = 1
sz$ = LEFT$(sz$, links - 1) + MID$(sz$, links + 1)
sz$ = LEFT$(sz$, MaxLenth)
sz$ = sz$ + SPACE$(MaxLenth - LEN(sz$))
Texts(dok.up + Screen.Z - 1) = sz$
Screen.S = Screen.S - 1

ELSE

Screen.S = MaxLenth: Screen.Z = Screen.Z - 1

IF Screen.Z < 1 THEN
Screen.Z = 1: dok.up = dok.up - 1
IF dok.up < 1 THEN dok.up = 1: Screen.Z = 1: Screen.S = 1
Screen.S = LEN(RTRIM$(Texts(dok.up + Screen.Z - 1))) + 1
GOTO Refreshing
ELSE Screen.S = LEN(RTRIM$(Texts(dok.up + Screen.Z - 1))) + 1
END IF

END IF


CASE "down"
Screen.Z = Screen.Z + 1
IF Screen.Z > MaxDown THEN Screen.Z = MaxDown: dok.up = dok.up + 1: GOTO Refreshing


CASE "up"
Screen.Z = Screen.Z - 1
IF Screen.Z < 1 THEN Screen.Z = 1: dok.up = dok.up - 1: GOTO Refreshing



CASE "left"
Screen.S = Screen.S - 1

IF Screen.S < 1 THEN
Screen.S = MaxLenth: Screen.Z = Screen.Z - 1

IF Screen.Z < 1 THEN
Screen.Z = 1: dok.up = dok.up - 1

IF dok.up < 1 THEN dok.up = 1: Screen.Z = 1: Screen.S = 1
Screen.S = LEN(RTRIM$(Texts(dok.up + Screen.Z - 1))) + 1
GOTO Refreshing

ELSE Screen.S = LEN(RTRIM$(Texts(dok.up + Screen.Z - 1))) + 1
END IF

END IF



CASE "right"
Screen.S = Screen.S + 1
IF Screen.S > MaxLenth THEN Screen.S = 1: Screen.Z = Screen.Z + 1
IF Screen.Z > MaxDown THEN Screen.Z = MaxDown: dok.up = dok.up + 1: GOTO Refreshing


CASE "esc": GetChanged: IF keyb <> "esc" THEN CHAIN "c:\laos\run.bas"


CASE CHR$(13)
IF Screen.S = 1 THEN
FOR Nach = MaxItem% TO dok.up + Screen.Z STEP -1
Texts(Nach) = Texts(Nach - 1)
NEXT Nach
Texts(dok.up + Screen.Z - 1) = SPACE$(MaxLenth)
rf = 1
END IF
Screen.S = 1
Screen.Z = Screen.Z + 1
IF Screen.Z > MaxDown THEN Screen.Z = MaxDown: dok.up = dok.up + 1: GOTO Refreshing

CASE ELSE
42
Changed = -1
sz$ = Texts(dok.up + Screen.Z - 1)
links = Screen.S - 1
IF links < 0 THEN links = 0
sz$ = LEFT$(sz$, links) + a$ + MID$(sz$, links + 1)
IF LEN(RTRIM$(sz$)) > MaxLenth THEN
    MsgBeep
    GOTO 5015
ELSE
    sz$ = LEFT$(sz$, MaxLenth)
    Texts(dok.up + Screen.Z - 1) = sz$
END IF

IF Umbruch THEN
'öberprÅfen, ob Zeilenumbruch durchgefÅhrt werden muss:
IF Screen.S = 1 AND LEFT$(Texts(dok.up + Screen.Z - 1), 1) <> " " THEN
    IF dok.up + Screen.Z - 2 >= 1 THEN
        IF RIGHT$(Texts(dok.up + Screen.Z - 2), 1) <> " " THEN
            FOR i = MaxLenth TO 1 STEP -1
                IF MID$(Texts(dok.up + Screen.Z - 2), i, 1) = " " THEN
                    IF LEN(MID$(Texts(dok.up + Screen.Z - 2), i) + RTRIM$(Texts(dok.up + Screen.Z - 1))) <= MaxLenth THEN
                        Texts(dok.up + Screen.Z - 1) = MID$(Texts(dok.up + Screen.Z - 2), i + 1) + LTRIM$(RTRIM$(Texts(dok.up + Screen.Z - 1)))
                        Screen.S = Screen.S + LEN(RTRIM$(Texts(dok.up + Screen.Z - 1))) - 1
                        Texts(dok.up + Screen.Z - 2) = LEFT$(Texts(dok.up + Screen.Z - 2), i)
                        rf = 1
                        EXIT FOR
                    ELSE
                        MsgBeep
                    END IF
                END IF
            NEXT
        END IF
    END IF
ELSEIF LEFT$(Texts(dok.up + Screen.Z - 1), 1) = " " AND Screen.S = 2 THEN
    'falls nîtig, am Anfang das Leerzeichen entfernen:
    IF MID$(Texts(dok.up + Screen.Z - 2), MaxLenth - 1, 1) <> " " THEN
        Texts(dok.up + Screen.Z - 1) = MID$(Texts(dok.up + Screen.Z - 1), 2)
        Screen.S = Screen.S - 1
    END IF
END IF
END IF


Screen.S = Screen.S + LEN(a$)

5015
IF Screen.S > MaxLenth THEN
    LOCATE Box.Top + Screen.Z - 1, Box.Left: PRINT Texts(dok.up + Screen.Z - 1): Screen.S = 1: Screen.Z = Screen.Z + 1
END IF

IF Screen.Z > MaxDown THEN Screen.Z = MaxDown: dok.up = dok.up + 1: GOTO Refreshing

END SELECT

IF rf = 1 THEN GOTO Refreshing

GOTO LinePrint
END SUB

FUNCTION ende (Nr)
zero = 1
FOR a = Nr + 1 TO 100
IF RTRIM$(Texts(a)) <> "" THEN zero = 0: EXIT FOR
NEXT
ende = zero
END FUNCTION

FUNCTION exist (p$)
f% = FREEFILE
ae% = errorlevel
errorlevel = 0
OPEN p$ FOR INPUT AS f%
IF errorlevel = 0 THEN exist = -1 ELSE exist = 0
CLOSE f%
errorlevel = ae%
END FUNCTION

SUB ExitBox (x, y)
IF x = -1 THEN x = EBox.left
IF y = -1 THEN y = EBox.top
LINE (x, y)-(x + 26, y + 20), Fensterfarbe, B
LINE (x + 1, y + 1)-(x + 25, y + 1), Schattenfarbe
LINE (x + 1, y + 1)-(x + 1, y + 19), Schattenfarbe
LINE (x, y + 21)-(x + 26, y + 21), Randfarbe
LINE (x + 27, y + 21)-(x + 27, y), Randfarbe

LINE (x + 2, y + 19)-(x + 24, y + 2), Fensterfarbe
LINE (x + 3, y + 19)-(x + 25, y + 2), Schattenfarbe
LINE (x + 2, y + 2)-(x + 24, y + 19), Fensterfarbe
LINE (x + 3, y + 2)-(x + 25, y + 19), Schattenfarbe

END SUB

FUNCTION FileChoose$ (Art1$)
'LÑsst den Benutzer eine Datei auswÑhlen. Art1$: Die Art-Spalte. Leer = alle.
301
DriveName = ""
Indrive = 0
SHELL "c:": CHDIR "\laos"
Register Fe2, Fe1, Fe4, Fe3, ""
ClearControls (2)
TimeLock 1
Datics = 0

'Laufwerke laden:
ON ERROR GOTO fehlernext
CLOSE 1: OPEN "drvlist.bnk" FOR RANDOM AS 1
nf = FREEFILE
lmf = nf + 1
CLOSE lmf: OPEN "c:\laos\lwmap.tmp" FOR RANDOM AS lmf

i = 0
DO
i = i + 1
errorlevel = 0

GET 1, i, LNam$
IF LNam$ = "" THEN EXIT DO
lw$ = LEFT$(LNam$, 1): OPEN lw$ + ":\nul" FOR BINARY AS nf: CLOSE nf
IF errorlevel = 0 THEN 'Laufwerk vorhanden:
IF MID$(LNam$, 4) <> DriveName$ THEN
OPEN lw$ + ":\laos\medname.inf" FOR RANDOM AS nf
GET nf, 1, b$
IF b$ = "" THEN b$ = MID$(LNam$, 4)
errorlevel = 0
CLOSE nf: OPEN lw$ + ":\laos\drvicon.lsb" FOR BINARY AS nf
Datics = Datics + 1

PUT lmf, , lw$

IF LOF(nf) = 0 THEN
LoadSymbol "drvicon", b$
ELSE
'Symbol des DatentrÑgers verwenden:
TimeLock 1
KILL "~otdric" + lw$ + ".lsb"
f = FREEFILE
OPEN "~otdric" + lw$ + ".lsb" FOR BINARY AS f
DIM g AS SINGLE
DIM Befehle(5) AS SINGLE
DO
FOR Nr = 0 TO 5
GET nf, , Befehle(Nr)
PUT f, , Befehle(Nr)
NEXT
LOOP WHILE Befehle(0) <> 0
CLOSE f
LoadSymbol "~otdric" + lw$, b$
END IF
CLOSE nf
LNam$ = ""
b$ = ""
END IF
END IF
LOOP
CLOSE lmf
TimeLock 0


'Ordner laden:
304
CLOSE 1: OPEN "ordner.bnk" FOR RANDOM AS 1
i = 0
DO
i = i + 1
GET 1, i, a$
IF a$ <> "" THEN LoadSymbol "ordner", a$
LOOP UNTIL a$ = ""

ShowSymbols

307
IF vv = 1 THEN vv = 0: GOTO 301
GetInp
IF keyb = "esc" AND Indrive = 0 THEN EXIT FUNCTION
IF keyb = "esc" THEN DriveName = "": GOTO 301

IF SymbolNr <= Datics THEN 'Laufwerk angewÑhlt:
Datics = 0
f = FREEFILE: OPEN "c:\laos\lwmap.tmp" FOR RANDOM AS f
GET f, SymbolNr, lw$: CLOSE f
Switchdrive lw$
ClearControls (2)
Register Fe2, Fe1, Fe4, Fe3, DriveName
Indrive = 1
GOTO 304
END IF

CLOSE 1: OPEN "DATEIEN.BNK" FOR RANDOM AS #1 LEN = 400
FIELD 1, 11 AS Dateiname$, 16 AS Art$, 11 AS Symbol$, 32 AS OsName$, 32 AS InOrdner$, 11 AS link$, 10 AS Datum$, 5 AS Zeit$, 1 AS Attribut$, 256 AS FileInfo$

Register Fe2, Fe1, Fe4, Fe3, Focus
TimeLock 1
Az = TIMER
ClearControls (2)
DO
GET 1
IF RTRIM$(InOrdner$) = Focus AND RTRIM$(Art$) = Art1$ OR Art1$ = "" AND RTRIM$(InOrdner$) = Focus THEN
LoadSymbol RTRIM$(Symbol$), RTRIM$(OsName$)
END IF
IF TIMER - Az > .5 THEN TimeLock (1): Az = TIMER
LOOP UNTIL Dateiname$ = STRING$(11, 0)

TimeLock (0)
ord$ = Focus

ShowSymbols

306
IF vv = 1 THEN vv = 0: GOTO 301
GetInp
IF keyb = "esc" AND Indrive = 0 THEN GOTO 301
IF keyb = "esc" THEN DriveName = "": ClearControls 2: Register Fe2, Fe1, Fe4, Fe3, DriveName: GOTO 304

ClearControls 2
FileChoose = DosFile(Focus, ord$)
SHARED nam$
nam$ = Focus
END FUNCTION

FUNCTION Format$ (FormatString AS STRING)
    Format$ = CHR$(0) + FormatString
END FUNCTION

SUB Frame
'Frame kann ausgefÅhrt werden, um ein Rahmen um das Fenster zu machen,
'und dabei aber die Left- Top- usw.-Kordinaten zu behalten.
'einzig die TextScale- und TextBreak- Koordinaten wechseln nach oben links.
'-> Siehe auch die Sub "CLW".

FrameWindow 0, 0, 638, 348, 0

'EBox.left = 603: EBox.top = 321
'Left = 2: Top = 2: Right = 79: Down = 24
TextScale = 2: TextBreak = 2
END SUB

SUB FrameWindow (a, b, c, d, del)
'Erstellt ein Fenster, ohne dabei die Umgebungsvariablen zu verÑndern
'Wahlweise wird der Inhalt des Fensters gelîscht (del = 1), oder nicht.

'Fenster:
LINE (a, b)-(c, d), Fensterfarbe, B
IF del = 1 THEN LINE (a + 2, b + 2)-(c - 1, d - 1), 0, BF
'Schatten:
LINE (a + 1, b + 1)-(c - 1, b + 1), Schattenfarbe
LINE (a + 1, b + 1)-(a + 1, d - 1), Schattenfarbe
'Rand:
LINE (c + 1, d + 1)-(a, d + 1), Randfarbe
LINE (c + 1, d + 1)-(c + 1, b), Randfarbe

END SUB

FUNCTION Gerade (Zahl)
IF Zahl / 2 - FIX(Zahl / 2) = 0 THEN Gerade = 1:  ELSE Gerade = 0
END FUNCTION

SUB GetChanged
PCOPY 0, 1
keyb = ""
IF NOT Changed THEN EXIT SUB

Register 8, 5, 16, 75, "Editor"
echo ""
echo "Die Datei ist nicht gespeichert. Wollen Sie weiterfahren, ohne zu speichern, und dafÅr alle énderungen am Text verlieren, oder wollen Sie den Text speichern?"
ClearControls 0
Control 14, 20, "   Text speichern   "
Control 14, 42, "  Nicht speichern  "
GetInp
ClearControls 0
PCOPY 1, 0
IF Focus = "   Text speichern   " AND keyb <> "esc" THEN Save
PCOPY 1, 0

END SUB

FUNCTION GetFile$ (Sym$, Art1$)
SHARED nam$
'Laufwerke laden:
71
Indrive = 0
Switchdrive "c"
ERASE Combo
ON ERROR GOTO fehlernext
CLOSE 1: OPEN "drvlist.bnk" FOR RANDOM AS 1
'vorhanden-Test
p = 0
f = FREEFILE: OPEN "c:\laos\lwmap.tmp" FOR RANDOM AS f
DO
    GET 1, , LNam$
    IF LNam$ = "" THEN EXIT DO
    errorlevel = 0
    nf = FREEFILE
    lw$ = LEFT$(LNam$, 1): OPEN lw$ + ":\nul" FOR BINARY AS nf: CLOSE nf
    IF errorlevel = 0 THEN 'LW vorhanden:
        PUT f, , lw$
        p = p + 1

        b$ = ""
        OPEN lw$ + ":\laos\medname.inf" FOR RANDOM AS nf
        GET nf, 1, b$
        IF b$ = "" THEN b$ = MID$(LNam$, 4)
        Combo(1, p) = b$
        CLOSE nf
    END IF
LOOP UNTIL LNam$ = ""
CLOSE f

72
othDrives = p

'Ordner laden:
CLOSE 1: OPEN "\laos\ordner.bnk" FOR RANDOM AS 1
i = 0
DO
i = i + 1: p = p + 1
GET 1, i, a$
Combo(1, p) = a$
LOOP UNTIL a$ = ""
200
Register 6, 1, 18, 80, "Datei speichern unter"
TextBreak = 35
echo ""
echo "Dateiname:"
echo ""
echo "Dateiinfo:"

DO
ExitBox -1, -1
201
ActivItem = ord$
ord$ = ComboBox(1, 8, 0, 0, 33)

IF keyb = "esc" AND Indrive = 1 THEN
GOTO 71
ELSEIF keyb = "esc" THEN EXIT FUNCTION
END IF

IF Choice <= othDrives THEN 'fremdes LW angewÑhlt
    f = FREEFILE: OPEN "c:\laos\lwmap.tmp" FOR RANDOM AS f
    GET f, Choice, lw$
    CLOSE f
    Switchdrive lw$
    p = 0
    Indrive = 1
    ERASE Combo
    GOTO 72
END IF


202
nam$ = InputBox(8, 47, nam$, 32, 1)
IF keyb = "esc" THEN EXIT FUNCTION
IF keyb = "down" THEN 203
IF keyb = "left" THEN 201

203
inf$ = InputBox(10, 47, inf$, 32, 8)
IF keyb = "esc" THEN EXIT FUNCTION
IF keyb = "up" THEN 202
IF keyb = "left" THEN 201
LOOP UNTIL keyb = CHR$(13)


IF IsExist(nam$, ord$) = 1 THEN
Register 8, 5, 16, 75, "Datei existiert schon"
echo ""
echo "Dieser Dateiname existiert schon im angewÑhlten Ordner."
echo "Soll diese Datei Åberschrieben werden, oder soll eine neue erstellt  werden?"
ClearControls 0
Control 14, 20, "     Neue Datei     "
Control 14, 42, "   öberschreiben   "
GetInp
IF Focus = "   öberschreiben   " THEN
errorlevel = 0
CLOSE 1: OPEN "\laos\wrt~.tmp" FOR OUTPUT AS 1
IF errorlevel = 1 THEN Dialog "Das Schreiben auf den DatentrÑger ist nicht mîglich. öberprÅfen Sie den     Schreibschutz.": GOTO 71
a$ = DosFile(nam$, ord$)
SetAttr a$, ""
IF RIGHT$(LinkIt, 6) = "runtmp" THEN Dialog "Datei muss erneut verschlÅsselt werden."
GetFile = a$: EXIT FUNCTION
END IF
IF Focus = "     Neue Datei     " THEN 200
END IF

'File îffnen:
errorlevel = 0

IF Sym$ = "" THEN Sym$ = "sys"
CLOSE 1: OPEN "\laos\DATEIEN.BNK" FOR RANDOM AS #1 LEN = 400
FIELD 1, 11 AS Dateiname$, 16 AS Art$, 11 AS Symbol$, 32 AS OsName$, 32 AS Ordner$, 11 AS link$, 10 AS Datum$, 5 AS Zeit$, 1 AS Attribut$, 256 AS FileInfo$
a = 0
DO
a = a + 1
GET 1, a
LOOP UNTIL Dateiname$ = STRING$(11, 0)

b = a
DO
dat$ = MID$(STR$(b), 2)
b = b + 1
LOOP WHILE exist(dat$)

IF errorlevel = 0 THEN

LSET Symbol$ = Sym$
LSET Dateiname$ = dat$
LSET Art$ = Art1$
LSET OsName$ = nam$
LSET Ordner$ = ord$
LSET link$ = "editor"
LSET Datum$ = SDate
LSET Zeit$ = TIME$
LSET FileInfo$ = inf$
PUT 1, a

ELSE Dialog "Das Schreiben auf den DatentrÑger ist nicht mîglich. öberprÅfen Sie den     Schreibschutz.": GOTO 71
END IF

CLOSE 1

GetFile = dat$

END FUNCTION

SUB GetInp
DIM kbd AS STRING
'Aktiviere das Control mit dem Fokus:
SELECT CASE ControlConnect
CASE 0: Activate MID$(ControlList(ControlNr), 5)
CASE 1: Activate MenuList(MenuNr)
CASE 2: Activate Symbollist(SymbolNr)
END SELECT


DO
FOR i = 15 TO 19: KEY(i) ON: NEXT i
IF InfoTime > 0 THEN
TIMER ON
ON TIMER(InfoTime) GOSUB TimeEreignis
END IF
  FOR i = 1 TO 4
    AlteZeit(i) = TIMER
  NEXT i
WHILE INKEY$ = CHR$(13) OR INKEY$ = CHR$(27): WEND
kbd = ""
 WHILE kbd = ""
  kbd = INKEY$
   FOR i = 1 TO 4
     IF Stoppuhr(i) > 0 THEN
       IF TIMER - AlteZeit(i) > Stoppuhr(i) THEN StoppUhrBeep (i): AlteZeit(i) = TIMER
     END IF
   NEXT i
 WEND
TIMER OFF: FOR i = 15 TO 19: KEY(i) OFF: NEXT i

SELECT CASE kbd
CASE CHR$(0) + "G": DO: a$ = Activ: LastControl: LOOP UNTIL a$ = Activ OR INKEY$ <> ""
CASE CHR$(0) + "O": DO: a$ = Activ: NextControl: LOOP UNTIL a$ = Activ OR INKEY$ <> ""
CASE CHR$(0) + "T": ShowInfo 'Manueller Q-Info-Abruf mit Shift+F1
CASE CHR$(13)
SELECT CASE ControlConnect
CASE 0: Focus = MID$(ControlList(ControlNr), 5)
CASE 1: Focus = MID$(MenuList(MenuNr), 5)
CASE 2: Focus = MID$(Symbollist(SymbolNr), 15)
END SELECT
keyb = kbd
EXIT SUB
CASE CHR$(9) 'Tab
STATIC ch AS INTEGER

Activate CHR$(0) 'Aktiviere ein Control, das gar nicht existiert, um alle
                 'anderen zu deaktivieren.
ControlConnect = ControlConnect + 1
IF ControlConnect > 2 THEN ControlConnect = 0
FOR i = 1 TO 3
SELECT CASE ControlConnect
CASE 0: IF ControlList(1) = "" THEN ControlConnect = 1
CASE 1: IF Change(ch + 1) <> 0 THEN ControlConnect = 0: EXIT FOR
        IF MenuList(1) = "" THEN ControlConnect = 2
CASE 2: IF Symbollist(1) = "" THEN ControlConnect = 0
END SELECT
NEXT i
SELECT CASE ControlConnect
CASE 0
ch = ch + 1
IF Change(ch) = 0 THEN ch = 0
IF ch <> 0 THEN ControlNr = Change(ch)
Activate MID$(ControlList(ControlNr), 5)
CASE 1: Activate MenuList(MenuNr)
CASE 2: Activate Symbollist(SymbolNr)
END SELECT
CASE CHR$(0) + "H", CHR$(0) + "K": LastControl
CASE CHR$(0) + "P", CHR$(0) + "M": NextControl
CASE CHR$(27), CHR$(8)
keyb = "esc": EXIT SUB'Minimize
END SELECT
LOOP

END SUB

FUNCTION GetKey$

FOR i = 15 TO 19: KEY(i) ON: NEXT i

a$ = "": WHILE a$ = "": a$ = INKEY$
IF Activ <> "" AND EBox = 1 THEN EXIT FUNCTION
WEND

SELECT CASE MID$(a$, 2)
CASE "H": a$ = "up"
CASE "P": a$ = "down"
CASE "K": a$ = "left"
CASE "M": a$ = "right"
CASE "R": a$ = "insert"
CASE "S": a$ = "delete"
CASE "G": a$ = "home"
CASE "O": a$ = "end"
CASE "I": a$ = "pageup"
CASE "Q": a$ = "pagedown"
END SELECT

SELECT CASE ASC(a$)
CASE 27: a$ = "esc"
CASE 9: a$ = "tab"
END SELECT

GetKey = a$
keyb = a$
END FUNCTION

SUB GraphicView (a, b, c, d)
'Diese Sub Ñndert die Umgebungsvariablen (Left, Top, usw.) fÅr einen bestimmt-
'en Fenster-Bereich. Die darauffolgenden Grafikausgaben erfolgen in diesem
'Bereich.
'LINE (a, B)-(c, d), Randfarbe, B



EBox.left = c - 31: EBox.top = d - 24
Left = INT(a / 8) + 2: Top = INT(b / 14) + 2: Right = INT((c + 8) / 8) - 1: Down = INT((d + 14) / 14) - 1
TextBreak = Left
TextScale = Top
END SUB

SUB Info (Ctrl$, InfoText$)
SHARED QuickInfos() AS STRING
i = 0
DO
i = i + 1
IF MID$(ControlList(i), 5) = Ctrl$ THEN EXIT DO
IF MID$(MenuList(i), 5) = Ctrl$ THEN EXIT DO
LOOP
QuickInfos(i) = InfoText$
END SUB

FUNCTION InputBox$ (Zeilen, Spalten, Text$, Break, MaxDown)
'Break=Zeilenumbruch | MaxDown=Maximale Zeilen

IF TextScale = 0 THEN TextScale = Top
IF TextBreak = 0 THEN TextBreak = Left
IF Zeilen = 0 THEN Zeilen = TextScale
IF Spalten = 0 THEN Spalten = TextBreak + 1

IF Break = 0 OR Break > Right - Spalten THEN Break = Right - Spalten
IF MaxDown = 0 THEN MaxDown = 24 - Zeilen
TotalBreak = Break
Texta$ = Text$: a$ = ""
GOTO Deletefirst

lesen:
a$ = GetKey

IF a$ = CHR$(13) THEN InputBox$ = Texta$: GOTO delcur
IF a$ = "up" OR a$ = "down" OR a$ = "left" OR a$ = "right" OR a$ = "tab" THEN InputBox$ = Texta$: GOTO delcur
IF a$ = "esc" THEN InputBox$ = Texta$: GOTO delcur
IF a$ = CHR$(8) THEN
IF LEN(Texta$) > 0 THEN Texta$ = LEFT$(Texta$, LEN(Texta$) - 1)
LINE (a, b)-(c + 1, d + 1), 0, BF
a$ = ""
END IF
IF dwn > MaxDown THEN a$ = "": nocur = 1

IF LEN(a$) = 1 THEN Texta$ = Texta$ + a$
Break = LEN(Texta$) + 1

Deletefirst:
Break = LEN(Texta$) + 1
dwn = INT(LEN(Texta$) / TotalBreak) + 1
IF Break > TotalBreak THEN Break = TotalBreak: nocur = 1
IF LEN(Texta$) < (INT(LEN(Texta$) / TotalBreak) + 1) * TotalBreak AND LEN(Texta$) > INT(LEN(Texta$) / TotalBreak) * TotalBreak THEN nocur = 0

a = Spalten * 8 - 11
b = Zeilen * 14 - 17
EndSpalte = Spalten + Break
EndZeile = Zeilen + INT(LEN(Texta$) / Break + 1)
IF dwn > MaxDown AND MaxDown > 1 THEN EndZeile = EndZeile - 1
IF Break = LEN(Texta$) THEN EndZeile = EndZeile - 1
c = EndSpalte * 8 - 5
d = EndZeile * 14 - 11

FrameWindow a, b, c, d, 1


ecr = TotalBreak * -1 + 1
FOR i = 1 TO INT(LEN(Texta$) / TotalBreak) + 1
LOCATE Zeilen + i - 1, Spalten
ecr = ecr + TotalBreak
PRINT MID$(Texta$, ecr, TotalBreak);
NEXT i
ecr = 0

IF nocur = 0 THEN LINE (POS(0) * 8, CSRLIN * 14)-(POS(0) * 8 - 8, CSRLIN * 14 - 14), InfoColor, BF ELSE nocur = 0
GOTO lesen

delcur:
LINE (POS(0) * 8, CSRLIN * 14)-(POS(0) * 8 - 8, CSRLIN * 14 - 14), 0, BF

END FUNCTION

FUNCTION IsEmptyBox (Ordner$)

CLOSE 1: OPEN "DATEIEN.BNK" FOR RANDOM AS #1 LEN = 400
FIELD 1, 11 AS Dateiname$, 16 AS Art$, 11 AS Symbol$, 32 AS OsName$, 32 AS InOrdner$, 11 AS link$, 10 AS Datum$, 5 AS Zeit$, 1 AS Attribut$, 256 AS FileInfo$

TimeLock (1)
AlteZeit = TIMER
DO
GET 1
IF RTRIM$(InOrdner$) = Ordner$ THEN IsEmptyBox = 0: TimeLock (0): EXIT FUNCTION

IF TIMER - AlteZeit > .5 THEN TimeLock (1): AlteZeit = TIMER
LOOP UNTIL Dateiname$ = STRING$(11, 0)
TimeLock (0)

IsEmptyBox = 1'Box ist leer
END FUNCTION

FUNCTION IsExist (Datei$, InOrdner$)

CLOSE 1: OPEN "DATEIEN.BNK" FOR RANDOM AS #1 LEN = 400
FIELD 1, 11 AS Dateiname$, 16 AS Art$, 11 AS Symbol$, 32 AS OsName$, 32 AS Ordner$, 11 AS link$, 10 AS Datum$, 5 AS Zeit$, 1 AS Attribut$, 256 AS FileInfo$

a = 0
DO
a = a + 1
GET 1, a
IF Datei$ = RTRIM$(OsName$) AND InOrdner$ = RTRIM$(Ordner$) THEN IsExist = 1: EXIT FUNCTION
IF Datei$ = RTRIM$(OsName$) AND InOrdner$ = "" THEN IsExist = 1: EXIT FUNCTION
LOOP UNTIL Dateiname$ = STRING$(11, 0)

IsExist = 0


END FUNCTION

FUNCTION IsExistBox (Box$)

CLOSE 1: OPEN "ORDNER.BNK" FOR RANDOM AS 1
i = 0
DO
i = i + 1
GET 1, i, a$
IF a$ = Box$ THEN IsExistBox = 1: EXIT FUNCTION
LOOP UNTIL a$ = ""

IsExistBox = 0
END FUNCTION

FUNCTION LaOSFileName$ (DosFile$)

CLOSE 1: OPEN "\laos\DATEIEN.BNK" FOR RANDOM AS #1 LEN = 400
FIELD 1, 11 AS Dateiname$, 16 AS Art$, 11 AS Symbol$, 32 AS OsName$, 32 AS Ordner$, 11 AS link$, 10 AS Datum$, 5 AS Zeit$, 1 AS Attribut$, 256 AS FileInfo$
a = 0
DO
a = a + 1
GET 1, a
IF RTRIM$(Dateiname$) = DosFile$ THEN LaOSFileName = RTRIM$(OsName$): EXIT FUNCTION
LOOP UNTIL Dateiname$ = STRING$(11, 0)

END FUNCTION

SUB LastControl
'Wird von GetInp verwendet.

SELECT CASE ControlConnect
CASE 0
ControlNr = ControlNr - 1
IF ControlNr < 1 THEN ControlNr = 1
i = 0
DO
i = i + 1
a$ = ControlList(i)
Activ = MID$(ControlList(ControlNr), 5)
Zeilen = VAL(MID$(a$, 1, 2))
Spalten = VAL(MID$(a$, 3, 2))
Texta$ = MID$(a$, 5)
IF a$ = "" THEN EXIT DO
Control Zeilen, Spalten, Texta$
LOOP UNTIL a$ = ""
CASE 1
MenuNr = MenuNr - 1
IF MenuNr < 1 THEN MenuNr = 1
Activate MenuList(MenuNr)
CASE 2
Symb.pnr = Symb.pnr - 1
SymbolNr = SymbolNr - 1
IF SymbolNr < 1 THEN SymbolNr = 1: Symb.pnr = 1
IF Symb.pnr < 1 THEN

pagerows% = FIX((Down - Top - 4) / (IconVerticalSpace + 4)) + 1

'SCREEN 0: STOP
i = SymbolNr
rows% = 0
y2 = VAL(MID$(Symbollist(i), 4, 3))
DO
    i = i - 1
    y = VAL(MID$(Symbollist(i), 4, 3))
    IF y < y2 THEN
        y2 = y
        rows% = rows% + 1
    END IF

LOOP UNTIL rows% >= pagerows%

DimNow = 1
SymbolNr.old = SymbolNr
SymbolNr = SymbolNr - ABS(i - SymbolNr)
IF SymbolNr < 0 THEN SymbolNr = 0
LINE (Left * 8 - 8, Top * 14 - 14)-(Right * 8, Down * 14), 0, BF
ShowSymbols
SymbolNr = SymbolNr.old
Symb.pnr = Symb.count
END IF
Activate Symbollist(SymbolNr)
END SELECT
END SUB

FUNCTION LinkIt$
CLOSE 1: OPEN "c:\laos\linkway.tmp" FOR RANDOM AS 1
GET 1, 1, a$
LinkIt = a$
CLOSE 1
END FUNCTION

SUB LoadPicture (PNr, Bild$, InOrdner$)

CLOSE 1: OPEN "DATEIEN.BNK" FOR RANDOM AS #1 LEN = 400
FIELD 1, 11 AS Dateiname$, 16 AS Art$, 11 AS Symbol$, 32 AS OsName$, 32 AS Ordner$, 11 AS link$, 10 AS Datum$, 5 AS Zeit$, 1 AS Attribut$, 256 AS FileInfo$

a = 0
DO
a = a + 1
GET 1, a
IF RTRIM$(OsName$) = Bild$ AND RTRIM$(Ordner$) = InOrdner$ THEN EXIT DO
LOOP UNTIL RTRIM$(Dateiname$) = ""
IF RTRIM$(Dateiname$) = "" THEN errorlevel = 1: EXIT SUB

Pictures(PNr) = Dateiname$
errorlevel = 0
END SUB

SUB LoadProgram (Ordner$, Programm$)

CLOSE 1: OPEN "DATEIEN.BNK" FOR RANDOM AS #1 LEN = 400
FIELD 1, 11 AS Dateiname$, 16 AS Art$, 11 AS Symbol$, 32 AS OsName$, 32 AS InOrdner$, 11 AS link$, 10 AS Datum$, 5 AS Zeit$, 1 AS Attribut$, 256 AS FileInfo$

AlteZeit = TIMER
ds = 0
DO
ds = ds + 1
GET 1, ds
IF RTRIM$(InOrdner$) = Ordner$ AND RTRIM$(OsName$) = Programm$ THEN EXIT DO
IF Dateiname$ = STRING$(11, 0) THEN Dialog "Es wurde versucht, ein Programm zu laden, das nicht existiert.": errorlevel = 1: EXIT SUB
IF TIMER - AlteZeit > .5 THEN TimeLock (1): AlteZeit = TIMER
LOOP

TimeLock (0)

SHARED Program AS STRING
Program = Dateiname$

CLOSE 1
errorlevel = 0
END SUB

SUB LoadSymbol (Name$, Kennung$)
Symb.total = Symb.total + 1

IF LEN(Kennung$) < 4 THEN Kennung$ = Kennung$ + SPACE$(4 - LEN(Kennung$))


IF Symb.left = 0 THEN Symb.left = Left
IF Symb.top = 0 THEN Symb.top = Top

x = (Symb.left - 2 + LEN(Kennung$) / 2) * 8
y = Symb.top * 14

IF (INT(x / 8)) + 4 - CINT(LEN(Kennung$) / 2) + LEN(Kennung$) > Right THEN
x = (Left - 2 + LEN(Kennung$) / 2) * 8: Symb.left = Left: Symb.top = Symb.top + 4 + IconVerticalSpace: y = Symb.top * 14
END IF

Symb.left = (INT(x / 8)) + 4 - CINT(LEN(Kennung$) / 2) + LEN(Kennung$)

'Symbol eintragen:

x$ = MID$(STR$(x), 2)
IF LEN(x$) < 3 THEN x$ = STRING$(3 - LEN(x$), "0") + x$

y$ = MID$(STR$(y), 2)
IF LEN(y$) < 3 THEN y$ = STRING$(3 - LEN(y$), "0") + y$

IF LEN(Name$) < 8 THEN Name$ = Name$ + STRING$(8 - LEN(Name$), " ")

a$ = x$ + y$ + Name$ + RTRIM$(Kennung$)

i = 0
DO: i = i + 1: LOOP UNTIL Symbollist(i) = ""
Symbollist(i) = a$
SymbolNr = 0
END SUB

SUB Loesche (AlterName$)
CLOSE 1: OPEN "DATEIEN.BNK" FOR RANDOM AS #1 LEN = 400
FIELD 1, 11 AS Dateiname$, 16 AS Art$, 11 AS Symbol$, 32 AS OsName$, 32 AS Ordner$, 11 AS link$, 10 AS Datum$, 5 AS Zeit$, 1 AS Attribut$, 256 AS FileInfo$

a = 0
DO
a = a + 1
GET 1, a
IF RTRIM$(Dateiname$) = AlterName$ THEN

errorlevel = 0
KILL "c:\laos\" + RTRIM$(Dateiname$)
IF errorlevel = 1 THEN KILL "c:\laos\" + RTRIM$(Dateiname$) + ".lao"

DO 'Eintrag lîschen
a = a + 1
GET 1, a
PUT 1, a - 1
LOOP UNTIL Dateiname$ = STRING$(11, 0)

errorlevel = 0
EXIT SUB
END IF
LOOP UNTIL Dateiname$ = STRING$(11, 0)

END SUB

SUB MakeWindow (a, b, c, d)

'Fenster:
LINE (a, b)-(c, d), Fensterfarbe, B
LINE (a + 2, b + 2)-(c - 1, d - 1), 0, BF
'Schatten:
LINE (a + 1, b + 1)-(c - 1, b + 1), Schattenfarbe
LINE (a + 1, b + 1)-(a + 1, d - 1), Schattenfarbe
'Rand:
LINE (c + 1, d + 1)-(a, d + 1), Randfarbe
LINE (c + 1, d + 1)-(c + 1, b), Randfarbe

TextScale = INT(b / 14) + 2 '=Zeile
TextBreak = INT(a / 8) + 2 '=Spalte


EBox.left = c - 31: EBox.top = d - 24
Left = INT(a / 8) + 2: Top = INT(b / 14) + 2: Right = INT((c + 8) / 8) - 1: Down = INT((d + 14) / 14) - 1

END SUB

SUB Menuact (Menu$)
Zeilen = VAL(LEFT$(Menu$, 2))
Spalten = VAL(MID$(Menu$, 3, 2))
Caption$ = MID$(Menu$, 5)
a = Spalten * 8 - 11: b = Zeilen * 14 - 17
c = (Spalten + LEN(Caption$)) * 8 - 5: d = (Zeilen + 1) * 14 - 11


IF Activ = Menu$ THEN
LOCATE Zeilen, Spalten: PRINT Caption$
Schatten:
LINE (a + 1, b + 1)-(c - 1, b + 1), Schattenfarbe
LINE (a + 1, b + 1)-(a + 1, d - 1), Schattenfarbe
ELSE
LINE (a + 1, b + 1)-(c - 1, b + 1), 0
LINE (a + 1, b + 1)-(a + 1, d - 1), 0
END IF
END SUB

SUB MenuBox (Zeilen, Spalten, Caption$)
STATIC NMZeilen AS INTEGER, NMSpalten AS INTEGER
IF NMZeilen = 0 THEN NMZeilen = Top
IF NMSpalten = 0 THEN NMSpalten = Left
IF Zeilen = 0 THEN Zeilen = NMZeilen
IF Spalten = 0 THEN Spalten = NMSpalten

IF Spalten + LEN(Caption$) - 1 > Right THEN Spalten = Left: Zeilen = Zeilen + 2
IF Zeilen > Down THEN Zeilen = Top: Spalten = Left

a = Spalten * 8 - 11: b = Zeilen * 14 - 17: c = (Spalten + LEN(Caption$)) * 8 - 5
d = (Zeilen + 1) * 14 - 11

'Lîschen:
LINE (a, b)-(c, d), 0, BF
LOCATE Zeilen, Spalten: PRINT Caption$
'Fenster:
LINE (a, b)-(c, d), Fensterfarbe, B
'Schatten:
'LINE (a + 1, B + 1)-(c - 1, B + 1), Schattenfarbe
'LINE (a + 1, B + 1)-(a + 1, d - 1), Schattenfarbe
'Rand:
LINE (c + 1, d + 1)-(a, d + 1), Randfarbe
LINE (c + 1, d + 1)-(c + 1, b), Randfarbe



NMSpalten = Spalten + LEN(Caption$) + 2
NMZeilen = Zeilen
IF NMSpalten > Right THEN NMSpalten = Left: NMZeilen = Zeilen + 2
IF NMZeilen > Down THEN NMZeilen = Top: NMSpalten = Left

'Menu eintragen:
Zeilen$ = MID$(STR$(Zeilen), 2)
Spalten$ = MID$(STR$(Spalten), 2)
IF LEN(Zeilen$) < 2 THEN Zeilen$ = "0" + Zeilen$
IF LEN(Spalten$) < 2 THEN Spalten$ = "0" + Spalten$

a$ = Zeilen$ + Spalten$ + Caption$
i = 0
DO: i = i + 1
IF MenuList(i) = a$ THEN EXIT SUB
LOOP UNTIL MenuList(i) = ""
MenuList(i) = a$
MenuNr = 1


TextScale = Zeilen + 2
END SUB

FUNCTION MenuInt$ (Item$, Trennzeichen$)

Item$ = Item$ + Trennzeichen$

i = 0
MaxLenth = 1
ERASE Combo

DO
i = i + 1

a$ = Trim(Item$, Trennzeichen$, i)

IF LEN(a$) > 77 THEN a$ = LEFT$(a$, 77)
IF LEN(a$) > MaxLenth THEN MaxLenth = LEN(a$)

IF a$ <> "" THEN Combo(1, i) = a$


LOOP WHILE a$ <> ""

Zeilen = VAL(LEFT$(MenuList(MenuNr), 2)) + 1
Spalten = VAL(MID$(MenuList(MenuNr), 3, 2))
IF Spalten + MaxLenth > 79 THEN Spalten = 79 - MaxLenth
IF Zeilen + i - 1 > 25 THEN Zeilen = 25 - i + 1
PCOPY 0, 1

a$ = ComboBox(1, Zeilen, Spalten, Zeilen + i - 2, Spalten + MaxLenth)


DO

SELECT CASE keyb
CASE CHR$(13): MenuInt$ = a$: EXIT DO
CASE "esc", "tab": EXIT DO
END SELECT
LOOP

PCOPY 1, 0
Activate CHR$(0)

END FUNCTION

'Erzeugt einen unaufdringlichen Piepston
SUB MsgBeep
    SOUND 1000, .1: SOUND 100, .1
END SUB

SUB NewBox (Name$) 'Richtet einen neuen Ordner ein.

CLOSE 1: OPEN "ORDNER.BNK" FOR RANDOM AS 1
i = 0
DO
i = i + 1
GET 1, i, a$
IF a$ = Name$ THEN BEEP: Dialog "Es wurde versucht, einen Ordner zu erstellen, welcher schon existiert.": errorlevel = 1: EXIT SUB
LOOP UNTIL a$ = ""

PUT 1, i, Name$
errorlevel = 0

END SUB

SUB NextControl
SELECT CASE ControlConnect
CASE 0
tC = 0
DO
tC = tC + 1
LOOP WHILE ControlList(tC) <> ""
tC = tC - 1

ControlNr = ControlNr + 1
IF ControlNr > tC THEN ControlNr = tC
i = 0
DO
i = i + 1
a$ = ControlList(i)
Activ = MID$(ControlList(ControlNr), 5)
Zeilen = VAL(MID$(a$, 1, 2))
Spalten = VAL(MID$(a$, 3, 2))
Texta$ = MID$(a$, 5)
IF a$ = "" THEN EXIT DO
Control Zeilen, Spalten, Texta$
LOOP UNTIL a$ = ""
CASE 1
tC = 0: DO: tC = tC + 1: LOOP WHILE MenuList(tC) <> ""
MenuNr = MenuNr + 1
IF MenuNr > tC - 1 THEN MenuNr = tC - 1
Activate MenuList(MenuNr)
CASE 2
tC = 0
DO
tC = tC + 1
LOOP WHILE Symbollist(tC) <> ""
SymbolNr = SymbolNr + 1: Symb.pnr = Symb.pnr + 1

IF SymbolNr > tC - 1 THEN
SymbolNr = tC - 1: Symb.pnr = Symb.pnr - 1
ELSE
IF Symb.pnr > Symb.count THEN
DimNow = 1
SymbolNr = SymbolNr - 1: Symb.pnr = Symb.pnr - 1
LINE (Left * 8 - 8, Top * 14 - 14)-(Right * 8, Down * 14), 0, BF
ShowSymbols
END IF
END IF
Activate Symbollist(SymbolNr)
END SELECT
END SUB

SUB PartFormat (Text$, Setting$)

IF INSTR(Text$, CHR$(0)) THEN
    Setting$ = MID$(Text$, INSTR(Text$, CHR$(0)) + 1)
    Text$ = LEFT$(Text$, INSTR(Text$, CHR$(0)) - 1)
ELSE
    Setting$ = ""
END IF

END SUB

SUB Register (Z, s, zu, su, Text$)
IF Z = 0 THEN Z = 1
IF s = 0 THEN s = 1
IF zu = 0 THEN zu = 25
IF su = 0 THEN su = 80
IF s + LEN(Text$) > su - 1 AND su - s > 2 THEN Text$ = LEFT$(Text$, su - s - 3) + ".."
a = s * 8 - 4
b = Z * 14 - 9
c = su * 8 - 7
d = zu * 14 - 7
'Fenster:
LINE (a, b - 4)-(c, d), 0, BF
LINE (a, b)-(c, d), Fensterfarbe, B
'Schatten:
LINE (a + 1, b + 1)-(c - 1, b + 1), Schattenfarbe
LINE (a + 1, b + 1)-(a + 1, d - 1), Schattenfarbe
'Rand:
LINE (c + 1, d + 1)-(a, d + 1), Randfarbe
LINE (c + 1, d + 1)-(c + 1, b), Randfarbe


TextScale = INT(b / 14) + 2 '=Zeile
TextBreak = INT(a / 8) + 2 '=Spalte
LOCATE INT(b / 14) + 1, TextBreak
PRINT Text$
Break = su - 1
IF Z = 1 THEN LINE (0, 0)-(638, 0), Fensterfarbe: LINE (1, 1)-(637, 1), 0: LINE (1, 1)-(1, 347), 0
EBox.left = c - 31: EBox.top = d - 24
Left = s + 1: Top = Z + 1: Right = su - 1: Down = zu - 1
END SUB

SUB Save

a$ = GetFile("Text", "Text")
errorlevel = 0
IF keyb = "esc" THEN EXIT SUB
loaded$ = a$
CLOSE 1: OPEN a$ FOR OUTPUT AS 1
FOR Nr = 1 TO 100
PRINT #1, RTRIM$(Texts(Nr))
IF ende(Nr) = 1 THEN EXIT FOR
NEXT
CLOSE 1
IF errorlevel THEN Dialog "Das Speichern konnte nicht erfolgreich abgeschlossen werden. Mag sein, dass der DatentrÑger voll ist. Speichern Sie das Dokument sicherheitshalber an   einem anderen Ort." ELSE Changed = 0

END SUB

FUNCTION SDate$ 'Function fÅr das CHAIN "c:\laos\run.bas": -Datum
SELECT CASE Datumsformat
CASE 0'TT.MM.JJJJ
SDate$ = MID$(DATE$, 4, 2) + "." + LEFT$(DATE$, 2) + "." + RIGHT$(DATE$, 4)
CASE 1'MM-TT-JJJJ
SDate$ = DATE$
CASE 2'JJJJ/MM/TT
SDate$ = RIGHT$(DATE$, 4) + "/" + LEFT$(DATE$, 2) + "/" + MID$(DATE$, 4, 2)
END SELECT
END FUNCTION

SUB SetAttr (aDatei$, Attr$)
Datei$ = aDatei$'ByVal simulieren

IF RIGHT$(Datei$, 4) = ".lao" THEN Datei$ = LEFT$(Datei$, LEN(Datei$) - 4)
nf = FREEFILE

CLOSE nf: OPEN "DATEIEN.BNK" FOR RANDOM AS #nf LEN = 400
FIELD nf, 11 AS Dateiname$, 16 AS Art$, 11 AS Symbol$, 32 AS OsName$, 32 AS Ordner$, 11 AS link$, 10 AS Datum$, 5 AS Zeit$, 1 AS Attribut$, 256 AS FileInfo$
a = 0
DO
a = a + 1
GET nf, a
IF RTRIM$(Dateiname$) = Datei$ THEN LSET Attribut$ = Attr$: PUT nf, a: EXIT SUB
LOOP UNTIL Dateiname$ = STRING$(11, 0)

END SUB

SUB SetTexts (start%, Txt$, weiter%)
PartFormat Txt$, fmt$

'Format: "l", "c", "r": LinksbÅndig, zentriert, rechtsbÅndig

SELECT CASE fmt$
    CASE "l", "": Align% = 0
    CASE "c": Align% = 1
    CASE "r": Align% = 2
END SELECT

Text$ = Txt$ + " "
weiter% = start%

DIM s AS INTEGER, Z AS INTEGER, T AS INTEGER, brk AS INTEGER


s = 1
Z = 78'Right - TextBreak + 2'ZeilenlÑnge
dwn = 0

p1% = s
p2% = p1%
DO
    T = T + 1
        IF T = p1% THEN p2% = p1%'alten Retten
        p1% = INSTR(T, Text$, " ")
        IF p1% = 0 OR p1% = LEN(Text$) THEN
            IF p1% <= s + Z - 1 THEN p2% = LEN(Text$): brk = -1
        END IF

        IF p1% > s + Z - 1 OR brk THEN 'nehme alten, weil neuen Åber die Zeile ragt.
            'Zeile ausgeben:
            p1% = p2%
            IF TextScale + dwn > Down THEN EXIT DO
                IF p1% - s <= 0 THEN 'falls Wort zu lange (nicht in die Zeile passt:)

                    p1% = s + Z - 1
                    a$ = MID$(Text$, s, p1% - s)
                    T = p1% - 1
                    s = T + 1

                ELSE

                    a$ = MID$(Text$, s, p1% - s)
                    T = p1% + 1
                    s = T
                END IF

            'Ausrichtung:
            SELECT CASE Align%
                CASE 0: x% = 0
                CASE 1: x% = FIX((Right - TextBreak - LEN(a$) + 1) / 2)
                CASE 2: x% = Z - LEN(a$) + 1
            END SELECT

            'LOCATE TextScale + dwn, x%
            a$ = SPACE$(x%) + a$
            Texts(weiter%) = a$
            weiter% = weiter% + 1

            dwn = dwn + 1
        END IF
LOOP UNTIL T >= LEN(Text$)


END SUB

SUB ShowInfo
IF ControlConnect = 2 THEN EXIT SUB
i = 0
DO
i = i + 1
IF i > 500 THEN EXIT SUB
IF MID$(ControlList(i), 5) = Activ OR MenuList(i) = Activ THEN EXIT DO
LOOP
IF QuickInfos(i) = "" THEN EXIT SUB
IF Activ = MenuList(i) THEN
Z = VAL(LEFT$(MenuList(i), 2)) + 1 'Menu
s = VAL(MID$(MenuList(i), 3, 2)) + 1
ELSE
Z = VAL(LEFT$(ControlList(i), 2)) + 1 'Control
s = VAL(MID$(ControlList(i), 3, 2)) + 1
END IF
IF s > Right THEN s = Right - LEN(MID$(ControlList(i), 5))

IF Z + INT(LEN(QuickInfos(i)) / (Right - s + 1)) + 1 > Down THEN Z = Down - (INT(LEN(QuickInfos(i)) / (Right - s + 1)) + 1) + 1
IF Z < Top THEN
s = Left + 1
Z = Down - INT(LEN(QuickInfos(i)) / (Right - s + 1))
END IF

REDIM BG(4 * 8 * 14 * 5) AS DOUBLE
GET (s * 8 - 9, Z * 14 - 15)-(s * 8 + (Right - s) * 8, Z * 14 - 14 + (INT(LEN(QuickInfos(i)) / (Right - s + 1)) + 1) * 14), BG
LINE (s * 8 - 9, Z * 14 - 15)-(s * 8 + (Right - s) * 8, Z * 14 - 14 + (INT(LEN(QuickInfos(i)) / (Right - s + 1)) + 1) * 14), 0, BF
LINE (s * 8 - 9, Z * 14 - 15)-(s * 8 + (Right - s) * 8, Z * 14 - 14 + (INT(LEN(QuickInfos(i)) / (Right - s + 1)) + 1) * 14), InfoFrame, B


ecr = (Right - s + 1) * -1 + 1
FOR a = 1 TO INT(LEN(QuickInfos(i)) / (Right - s + 1)) + 1
LOCATE Z + a - 1, s
ecr = ecr + Right - s + 1
COLOR InfoColor: PRINT MID$(QuickInfos(i), ecr, Right - s + 1)
NEXT
COLOR Farbe
ecr = 0
a = 0
i = 0
SLEEP
PUT (s * 8 - 9, Z * 14 - 15), BG, PSET
END SUB

SUB ShowPicture (PNr, Streck)

Bild$ = Pictures(PNr)
IF Streck = 0 THEN Streck = 1

DIM Befehle(2500, 5) AS SINGLE
DIM i AS INTEGER
DIM Nr AS INTEGER

CLOSE 1: OPEN Bild$ FOR BINARY AS 1

i = 0
DO
i = i + 1
FOR Nr = 0 TO 5
GET 1, , Befehle(i, Nr)
NEXT
LOOP WHILE Befehle(i, 0) <> 0
i = 0
DO
i = i + 1
SELECT CASE CHR$(Befehle(i, 0))
CASE "p": PSET (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus), Befehle(i, 3)
CASE "m": PAINT (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus), Befehle(i, 3), Befehle(i, 4)
CASE "l": LINE (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus)-(Befehle(i, 3) + xplus, Befehle(i, 4) + yplus), Befehle(i, 5)
CASE "r": LINE (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus)-(Befehle(i, 3) + xplus, Befehle(i, 4) + yplus), Befehle(i, 5), B
CASE "b": LINE (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus)-(Befehle(i, 3) + xplus, Befehle(i, 4) + yplus), Befehle(i, 5), BF
CASE "k": CIRCLE (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus), Befehle(i, 3), Befehle(i, 4), , , Befehle(i, 5)
CASE "x": CIRCLE (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus), Befehle(i, 3), Befehle(i, 4), Befehle(i + 1, 1), Befehle(i + 1, 2), Befehle(i, 5)
          i = i + 1
END SELECT
LOOP WHILE Befehle(i, 0) <> 0
i = 0

END SUB

SUB ShowSymbols
Symb.count = 0
Symbol = SymbolNr
DIM Befehle(2500, 5) AS SINGLE
DIM i AS INTEGER
DIM Nr AS INTEGER
DIM LastSymbol AS STRING


IF Symbol = 0 THEN DimY = 0

DO
Symbol = Symbol + 1
Symb.count = Symb.count + 1

a$ = Symbollist(Symbol)
IF a$ = "" THEN EXIT DO

Name$ = MID$(a$, 7, 8)
Kennung$ = MID$(a$, 15)
IF LEN(Kennung$) < 4 THEN Kennung$ = STRING$(INT((4 - LEN(Kennung$)) / 2), " ") + Kennung$ + STRING$(CINT((4 - LEN(Kennung$)) / 2 + .1), " ")

x = VAL(LEFT$(a$, 3))
y = VAL(MID$(a$, 4, 3))
IF DimNow = 1 THEN DimY = y - Top * 14: DimNow = 0
y = y - DimY
IF y > Down * 14 - 46 THEN DimNow = 1: EXIT DO'DimY = DimY + y - Top * 14: EXIT DO

VIEW (x, y)-(x + 40, y + 40), SymbolColor, SymbolFrame
Spalten = (INT(x / 8)) + 4 - CINT(LEN(Kennung$) / 2)
IF Spalten <= 1 THEN Spalten = 2
IF Spalten + LEN(Kennung$) > Right THEN Spalten = Right - LEN(Kennung$)
IF Spalten <= Left THEN Kennung$ = LEFT$(Kennung$, LEN(Kennung$) - ((Left - Spalten) + 1)): Spalten = Left + 1
LOCATE INT((y + 40) / 14) + 2, Spalten: PRINT Kennung$
Symb.left = Spalten + LEN(Kennung$)

IF LastSymbol <> Name$ THEN
LastSymbol = Name$

CLOSE 1: OPEN Name$ + ".lsb" FOR BINARY AS 1: GET 1, 1, TA
IF TA = 0 THEN
    Name$ = "c:\laos\" + Name$
    CLOSE 1: OPEN RTRIM$(Name$) + ".lsb" FOR BINARY AS 1: GET 1, 1, TA
    IF TA = 0 THEN Name$ = "c:\laos\sys"
END IF

CLOSE 1: OPEN Name$ + ".lsb" FOR BINARY AS 1

i = 0
DO
i = i + 1
FOR Nr = 0 TO 5
GET 1, , Befehle(i, Nr)
NEXT
LOOP WHILE Befehle(i, 0) <> 0

i = 0
DO
i = i + 1
SELECT CASE CHR$(Befehle(i, 0))
CASE "p": PSET (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus), Befehle(i, 3)
CASE "m": PAINT (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus), Befehle(i, 3), Befehle(i, 4)
CASE "l": LINE (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus)-(Befehle(i, 3) + xplus, Befehle(i, 4) + yplus), Befehle(i, 5)
CASE "r": LINE (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus)-(Befehle(i, 3) + xplus, Befehle(i, 4) + yplus), Befehle(i, 5), B
CASE "b": LINE (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus)-(Befehle(i, 3) + xplus, Befehle(i, 4) + yplus), Befehle(i, 5), BF
CASE "k": CIRCLE (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus), Befehle(i, 3), Befehle(i, 4), , , Befehle(i, 5)
CASE "x": CIRCLE (Befehle(i, 1) + xplus, Befehle(i, 2) + yplus), Befehle(i, 3), Befehle(i, 4), Befehle(i + 1, 1), Befehle(i + 1, 2), Befehle(i, 5)
          i = i + 1
END SELECT
LOOP WHILE Befehle(i, 0) <> 0
i = 0
    GET (0, 0)-(40, 40), Hintergrund
ELSE
    PUT (0, 0), Hintergrund, PSET
END IF

VIEW 'Setzt das Darstellungsfeld wieder auf den ganzen Bildschirm.
LOOP
IF a$ <> "" THEN Symb.ipp = Symb.count - 1
Symb.total = Symbol - 1
Symb.count = Symb.count - 1

ControlConnect = 2 'Setzt den Verweis auf das Symbol-Steuerelement
SymbolNr = Symb.total - Symb.count + 1
Symb.pnr = 1
END SUB

SUB StoppUhrBeep (Uhr)
SELECT CASE Uhr
CASE 1: TimeLock (1)
CASE 2: SCREEN , , 1, 1: COLOR , 0: CLS
a$ = "": DO: a$ = INKEY$: LOOP WHILE a$ = ""
SCREEN , , 0, 0: COLOR Farbe, Hintergrundfarbe

END SELECT
END SUB

SUB Switchdrive (lw$)
IF lw$ = "c" THEN SHELL "c:": CHDIR "\laos": EXIT SUB

ON ERROR GOTO fehlernext
errorlevel = 0
SHELL lw$ + ":"
CHDIR "\laos"

IF errorlevel = 0 THEN

CLOSE 1: OPEN "c:\laos\drvlist.bnk" FOR RANDOM AS 1
   
    i = 0
    DO
        i = i + 1
        GET 1, i, a$
    LOOP UNTIL LEFT$(a$, 1) = lw$ OR a$ = ""

CLOSE 1: OPEN lw$ + ":\laos\medname.inf" FOR RANDOM AS 1
GET 1, 1, DriveName
IF DriveName = "" THEN DriveName = MID$(a$, 4)

END IF

END SUB

SUB Symbact (Symbol$) 'Aktiviert ein Symbol
x = VAL(MID$(Symbol$, 1, 3))
y = VAL(MID$(Symbol$, 4, 3))
IF DimNow = 1 THEN DimY = DimY + (y - Top * 14): DimNow = 0
y = y - DimY

IF Activ = Symbol$ THEN
LINE (x - 2, y - 2)-(x + 42, y + 42), Symbolactiv, B, SymbactStil
ELSE
IF y >= Top * 14 AND y < Down * 14 - 46 THEN LINE (x - 2, y - 2)-(x + 42, y + 42), 0, B, SymbactStil
END IF
END SUB

SUB TextBox (Zeilen, Spalten, Text$, Break)
'Break heisst hier: Hier wird der Text gebrochen (Zeilenumbruch)

IF TextScale = 0 THEN TextScale = Top
IF TextBreak = 0 THEN TextBreak = Left
IF Zeilen = 0 THEN Zeilen = TextScale
IF Spalten = 0 THEN Spalten = TextBreak + 1

IF Zeilen > 24 THEN Zeilen = 24

IF Spalten + LEN(Text$) > Right AND Break = 0 THEN Break = Right - Spalten
IF Break = 0 THEN Break = LEN(Text$)
IF Break = 0 THEN Spalten = Spalten - 1: Break = 1


a = Spalten * 8 - 11
b = Zeilen * 14 - 17
EndSpalte = Spalten + Break
EndZeile = Zeilen + INT(LEN(Text$) / Break + 1)
IF Break = LEN(Text$) THEN EndZeile = EndZeile - 1
c = EndSpalte * 8 - 5
d = EndZeile * 14 - 11

FrameWindow a, b, c, d, 1

ecr = Break * -1 + 1
FOR i = 1 TO INT(LEN(Text$) / Break) + 1
LOCATE Zeilen + i - 1, Spalten
ecr = ecr + Break
PRINT MID$(Text$, ecr, Break)
NEXT i
ecr = 0


TextScale = EndZeile + 1
END SUB

SUB TimeLock (Status)
STATIC On.too
STATIC tm
Radius = 14 * 2
Farbe1 = 12
Farbe2 = 9
x = 319 - Radius
y = 174 - Radius

SELECT CASE Status
CASE 1:
'Falls es das erste Mal ist, muss der Hintergrund noch gespeichert werden:
IF On.too = 0 THEN On.too = 1: GET (319 - Radius, 174 - Radius)-(319 + Radius, 174 + Radius), Hintergrund

LINE (x + Radius - Radius, y + Radius - Radius)-(x + Radius + Radius, y + Radius + Radius), 0, BF
IF tm = 1 THEN tm = 0 ELSE tm = 1

IF tm = 0 THEN
LINE (x + Radius / 3 * 2, y + Radius / 3 * 2)-(x + Radius / 3 * 4, y + Radius / 3 * 4), Farbe1
LINE (x + Radius / 3 * 2, y + Radius / 3 * 4)-(x + Radius / 3 * 4, y + Radius / 3 * 2), Farbe1
CIRCLE (x + Radius, y + Radius), Radius / 2, Farbe1, , , .9
PAINT (x + Radius + 1, y + Radius), Farbe1
PAINT (x + Radius - 1, y + Radius), Farbe1
END IF


IF tm = 1 THEN
LINE (x + Radius / 3 * 2, y + Radius / 3 * 2)-(x + Radius / 3 * 4, y + Radius / 3 * 4), Farbe2
LINE (x + Radius / 3 * 2, y + Radius / 3 * 4)-(x + Radius / 3 * 4, y + Radius / 3 * 2), Farbe2
CIRCLE (x + Radius, y + Radius), Radius / 2, Farbe2, , , .9
PAINT (x + Radius, y + Radius + 1), Farbe2
PAINT (x + Radius, y + Radius - 1), Farbe2
END IF
CASE 0: IF On.too <> 0 THEN On.too = 0: PUT (319 - Radius, 174 - Radius), Hintergrund, PSET: Stoppuhr(1) = 0
END SELECT
END SUB

FUNCTION Trim$ (Variable$, Trennzeichen$, a)

mcr = 0
gef = 0
FOR i = 1 TO LEN(Variable$)
mcr = mcr + 1
a$ = MID$(Variable$, mcr)
IF LEFT$(a$, 1) = Trennzeichen$ THEN gef = gef + 1
IF gef = a - 1 THEN EXIT FOR
NEXT
IF LEFT$(a$, 1) = Trennzeichen$ THEN a$ = MID$(a$, 2) ELSE a$ = a$

mcr = 0
FOR i = 1 TO LEN(a$)
mcr = mcr + 1
IF MID$(a$, mcr, 1) = Trennzeichen$ THEN a$ = LEFT$(a$, mcr - 1): EXIT FOR
NEXT

Trim$ = a$

END FUNCTION

